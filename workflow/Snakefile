import os
from itertools import combinations
configfile: "config.yaml"

input_sets = config.keys()
As= [config['samples']['inparanoid'][k]["Aproteins"] for k in config['samples']['inparanoid']]
Bs= [config['samples']['inparanoid'][k]["Bproteins"] for k in config['samples']['inparanoid']]
SAMPLES = list(set([*As,*Bs]))
As_basenames= [os.path.basename(A) for A in As]
Bs_basenames= [os.path.basename(B) for B in Bs]
PAIRS = list(map(lambda pair: "-".join(pair),list(zip(As_basenames,Bs_basenames))))
Q= [os.path.splitext(os.path.basename(q))[0] for q in config['samples']['mmseqs']['queries']]
T= [os.path.splitext(os.path.basename(t))[0] for t in config['samples']['mmseqs']['targets']]
SETS=[k for k in config['samples']['inparanoid']]

rule all:
    input:
        expand("results/mmseqs_easy_rbh/{query}-{target}.orthotype.txt", query=Q,target=T),
        expand("results/inparanoid/{set}/orthotype.SQLtable.{pair}.csv",zip,set=SETS,pair=PAIRS),

        
rule mmseqs_easy_rbh:
    input:
        Aproteins='input/mmseqs/queries/{query}.fasta',
        Bproteins='input/mmseqs/targets/{target}.fasta'
    params:
        e = config["mmseqs"]["evalue"]
    output:
        "results/mmseqs_easy_rbh/{query}-{target}.txt"
    container:
        "https://depot.galaxyproject.org/singularity/mmseqs2:15.6f452--pl5321h6a68c12_3"
    shell:
        """
        mmseqs easy-rbh {input.Aproteins} {input.Bproteins} {output} tmp -e {params.e}  --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qcov,tcov
        """

rule mmseqs_postprocessing:
    input:
        "results/mmseqs_easy_rbh/{query}-{target}.txt"
    output:
        "results/mmseqs_easy_rbh/{query}-{target}.orthotype.txt"
    shell:
        """
        python workflow/scripts/postprocess_mmseqs_output.py {input} {output}
        """

rule inparanoid:
    input:
        SAMPLES
    output:
        temp("results/inparanoid/{set}/SQLtable.{pair}")
    container:
        "docker://sonnhammer/inparanoid:singularity"
    shell:
        """
        bash /runSingularity.sh
        """

rule inparanoid_postprocessing:
    input:
        "results/inparanoid/{set}/SQLtable.{pair}"
    output:
        "results/inparanoid/{set}/orthotype.SQLtable.{pair}.csv"
    shell:
        """
        python workflow/scripts/postprocess_inparanoid_output.py {input} {output}
        """

        




	
